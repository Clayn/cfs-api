/*
 * Copyright (C) 2016 Clayn <clayn_osmato@gmx.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.bplaced.clayn.cfs.util;

import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import net.bplaced.clayn.cfs.ext.functional.TryingPredicate;
import net.bplaced.clayn.cfs.ext.functional.TryingSupplier;
import net.bplaced.clayn.cfs.ext.functional.TryingUnaryOperator;

/**
 * Utility class for helpful methods for {@link Stream streams}.
 *
 * @author Clayn
 * @since 0.1
 * @version $Revision: 329 $
 */
public final class StreamUtils
{

    /**
     * Generates an stream starting with the {@code first} value and adding the
     * values generated with {@code next} as long as {@code until} returns
     * {@code true} for the current value including {@code first}. {@code until}
     * will also check the first value.
     *
     * @param <T> the type for the values
     * @param first the first value to check and, if accepted, add
     * @param next the operation that generates a new value from the current one
     * @param until the operation that checks the current value and decides if
     * it should be added and the method should continue.
     * @return a stream with all values generated by {@code next} as long as
     * {@code until} returns {@code true}
     * @since 0.1
     */
    public static <T> Stream<T> generateWhile(T first, UnaryOperator<T> next,
            Predicate<T> until)
    {
        return generateWhile(new TryingSupplier<T>()
        {
            @Override
            public T tryGet() throws Exception
            {
                return first;
            }
        }, next::apply, until::test);
    }

    public static <T> Stream<T> generateWhile(TryingSupplier<T> first,
            TryingUnaryOperator<T> next,
            TryingPredicate<T> until)
    {
        Stream.Builder<T> builder = Stream.builder();
        T val = first.get();
        while (until.test(val))
        {
            builder.accept(val);
            val = next.apply(val);
        }
        return builder.build();
    }

    public static <T> Stream<T> generateWhile(TryingSupplier<T> first,
            TryingSupplier<T> next,
            TryingPredicate<T> until)
    {
        return generateWhile(first, (t) -> next.get(), until);
    }

    public static <T> Stream<T> generateWhile(TryingSupplier<T> gen,
            TryingPredicate<T> until)
    {
        return generateWhile(gen, gen, until);
    }
}
